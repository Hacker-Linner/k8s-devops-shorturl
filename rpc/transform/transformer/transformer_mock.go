// Code generated by MockGen. DO NOT EDIT.
// Source: transformer.go

// Package transformer is a generated GoMock package.
package transformer

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTransformer is a mock of Transformer interface
type MockTransformer struct {
	ctrl     *gomock.Controller
	recorder *MockTransformerMockRecorder
}

// MockTransformerMockRecorder is the mock recorder for MockTransformer
type MockTransformerMockRecorder struct {
	mock *MockTransformer
}

// NewMockTransformer creates a new mock instance
func NewMockTransformer(ctrl *gomock.Controller) *MockTransformer {
	mock := &MockTransformer{ctrl: ctrl}
	mock.recorder = &MockTransformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransformer) EXPECT() *MockTransformerMockRecorder {
	return m.recorder
}

// Expand mocks base method
func (m *MockTransformer) Expand(ctx context.Context, in *ExpandReq) (*ExpandResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expand", ctx, in)
	ret0, _ := ret[0].(*ExpandResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Expand indicates an expected call of Expand
func (mr *MockTransformerMockRecorder) Expand(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expand", reflect.TypeOf((*MockTransformer)(nil).Expand), ctx, in)
}

// Shorten mocks base method
func (m *MockTransformer) Shorten(ctx context.Context, in *ShortenReq) (*ShortenResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shorten", ctx, in)
	ret0, _ := ret[0].(*ShortenResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shorten indicates an expected call of Shorten
func (mr *MockTransformerMockRecorder) Shorten(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shorten", reflect.TypeOf((*MockTransformer)(nil).Shorten), ctx, in)
}
